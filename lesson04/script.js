'use strict';
// 1. Написать функцию, преобразующую число в объект.
// Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни.
// Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}.
// Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
console.log('Задание 1');

let num = Math.floor(Math.random() * 999);
console.log (num);

let numberFromPos = (num, pos) => parseInt(String(num)[pos]);

function numberToObj(num) {
    if (num > 999) {
        console.log('Число больше 999');
        let obj = {};
        return obj;
    }
    else {
        let obj = {
            // Первый пришедший в голову вариант
            // 'сотни': (num - num % 100) / 100,
            // 'десятки': (num - num % 10) / 10,
            // 'единицы': num % 10,

            // Второй математический вариант
            // 'сотни': Math.floor(num/100),
            // 'десятки': Math.floor(num%100/10),
            // 'единицы': num % 10,

            //Третий вариант через функцию с преобразованием в строку
            'сотни': numberFromPos(num,0),
            'десятки': numberFromPos(num,1),
            'единицы': numberFromPos(num,2),
        }
        return obj;
    }   
}

console.log(numberToObj(num));

// 2.Продолжить работу с интернет-магазином:
// 2.1. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
// 2.2. Реализуйте такие объекты.
// 2.3. Перенести функционал подсчета корзины на объектно-ориентированную базу.
console.log('Задание 2');

let cart = {
    items: [
        {
            name: 'товар1',
            price: 100,
            count: 5,
        },
        {
            name: 'товар2',
            price: 1550,
            count: 2,
        },
        {
            name: 'товар3',
            price: 5600,
            count: 1,
        },
        {
            name: 'товар4',
            price: 330,
            count: 3,
        }
    ],
    countCartPrice() {
        let sum = 0;
        for (let i = 0; i < this.items.length; i++) {
            sum += this.items[i].price * this.items[i].count;
        }
        return sum;
    }
}

console.log(cart.countCartPrice());

// 3.* Подумать над глобальными сущностями.
// К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога.
// Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта,
// но в разных местах давал возможность вызывать разные методы.
// 
// Не очень понял задание, без конкретной задачи пока сложно представить :)
// Скорее всего, появятся дополнительные свойства у товара, в зависимости от категории товара
// Мне ближе структура БД, и там это было бы несколько таблиц с сылками
// table product (id, name, category_id, price, balance, description)
// table product_category (id, name, properties_id)
// table product_properties (id, name, values)
// table user (id, name)
// table cart (id, user_id, product_id, count)
// навскидку как-то так, здесь наверное будет что-то похожее :)