// 1. Дан код:
// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2 - Инкремент ++ увеличивает переменную на 1. c = 1 + 1 = 2
// d = b++; alert(d);           // 1 - Постфиксная форма ++ сперва возвращает значение, а только потом увеличивает его на 1
// c = (2+ ++a); alert(c);      // 5 - Инкремент ++ приоритетнее, соответственно сперва переменная "а" (уже равная 2 из-за первой операции) будет увеличина ещё на 1, а затем произойдет операция сложения 2 + 3 = 5
// d = (2+ b++); alert(d);      // 4 - Поствиксная форма ++ вернёт значение переменной "b" = 2 (из-за второй операции), произойдет сложение 2 + 2, переменной d будет присовено значение 4, переменная b будет увеличена на 1
// alert(a);                    // 3 - перменная "a" была увеличина на 1 в первой и третьей операции (++)
// alert(b);                    // 3 - перменная "b" была увеличина на 1 во второй и четвертой операции (++)
// Почему код даёт именно такие результаты?

// 2. Чему будет равен x в примере ниже?

// var a = 2;
// var x = 1 + (a *= 2);
// alert(x); // x = 5, a *= 2 - тоже самое что a = a * 2 = 2 * 2 = 4, 1 + 4 = 5

// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения.
// Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.

// let a = -3;
// let b = -4;
// if (a > 0 && b > 0) alert(`${a} и ${b} > 0 --- ${a}-${b}=${a-b}`);
// if (a < 0 && b < 0) alert(`${a} и ${b} < 0 --- ${a}*${b}=${a*b}`);
// if ((a >= 0 && b < 0) || (a < 0 && b >= 0)) alert(`${a} и ${b} разных знаков --- ${a}*${b}=${a*b}`);

// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.

// let a = Math.floor(Math.random() * 15);
// switch (a) {
//     case 0:
//         console.log (a++);
//     case 1:
//         console.log (a++);
//     case 2:
//         console.log (a++);
//     case 3:
//         console.log (a++);
//     case 4:
//         console.log (a++);
//     case 5:
//         console.log (a++);
//     case 6:
//         console.log (a++);
//     case 7:
//         console.log (a++);
//     case 8:
//         console.log (a++);
//     case 9:
//         console.log (a++);
//     case 10:
//         console.log (a++);
//     case 11:
//         console.log (a++);
//     case 12:
//         console.log (a++);
//     case 13:
//         console.log (a++);
//     case 14:
//         console.log (a++);
//     case 15:
//         console.log (a);                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
// }

// 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами.
// Обязательно использовать оператор return.

// function plus(a, b) {
//     return a + b;
// }

// function minus(a, b) {
//     return a - b;
// }

// function multiply(a, b) {
//     return a * b;
// }

// function divide(a, b) {
//     return a / b;
// }

// let a = 7;
// let b = 5;

// console.log (`a = ${a}, b = ${b}`)
// console.log ('a + b = ' + plus(a, b))
// console.log ('a - b = ' + minus(a, b))
// console.log ('a * b = ' + multiply(a, b))
// console.log ('a / b = ' + divide(a, b))

// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
// где arg1, arg2 – значения аргументов, operation – строка с названием операции.
// В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5)
// и вернуть полученное значение (использовать switch).

// let arg1 = 4;
// let arg2 = 3;
// let operation = 'деление'

// function mathOperation(arg1, arg2, operation) {
//     switch (operation) {
//         case 'сложение': return arg1 + arg2;
//         case 'вычитание': return arg1 - arg2;
//         case 'умножение': return arg1 * arg2;
//         case 'деление': return arg1 / arg2;
//         default:
//             break;
//     }
// }

// console.log (`${operation} ${arg1} и ${arg2} = ${mathOperation(arg1, arg2, operation)}`);

// 7. *Сравнить null и 0. Попробуйте объяснить результат.

// null > 0; // false
// null == 0; // false
// null >= 0; // true
// опреаторы сравнения > < >= <= преобразуют null в число, рассматривая его как 0. Поэтому выражение null >= 0 истинно, а null > 0 ложно.
// при нестрогом равенстве == значений undefined и null действует особое правило: эти значения ни к чему не приводятся, они равны друг другу и не равны ничему другому.

// 8. *С помощью рекурсии организовать функцию возведения числа в степень.
// Формат: function power(val, pow), где val – заданное число, pow – степень.

// function power(val, pow) {
//     if (val <= 0 || pow <=0 || !Number.isInteger(val) || !Number.isInteger(pow)) return 'введинте целые числа больше 1';
//     if (val === 1) return 1;
//     if (pow === 1) return val;
//     return val * power(val, pow - 1);
// }

// console.log (power(1, 4));